<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mycat 配置详解]]></title>
    <url>%2F2018%2F12%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[MyCat简介Mycat是一款基于阿里开源产品Cobar而研发的开源数据库分库分表中间件（基于Java语言开发）。官网所言：Mycat国内最活跃的、性能最好的开源数据库中间件！ MyCat关键特性 支持SQL92标准 支持MySQL、Oracle、DB2、SQL Server、PostgreSQL等DB的常见SQL语法 遵守Mysql原生协议，跨语言，跨平台，跨数据库的通用中间件代理 基于心跳的自动故障切换，支持读写分离，支持MySQL主从，以及galera cluster集群 支持Galera for MySQL集群，Percona Cluster或者MariaDB cluster 基于Nio实现，有效管理线程，解决高并发问题 支持数据的多片自动路由与聚合，支持sum,count,max等常用的聚合函数,支持跨库分页 支持单库内部任意join，支持跨库2表join，甚至基于caltlet的多表join 支持通过全局表，ER关系的分片策略，实现了高效的多表join查询 支持多租户方案 支持分布式事务（弱xa） 支持XA分布式事务（1.6.5） 支持全局序列号，解决分布式下的主键生成问题 分片规则丰富，插件化开发，易于扩展 强大的web，命令行监控 支持前端作为MySQL通用代理，后端JDBC方式支持MySQL、PostgreSQL、Oracle、DB2、SQLServer、MongoDB、巨杉 支持密码加密 支持服务降级 支持IP白名单 支持SQL黑名单、sql注入攻击拦截 支持prepare预编译指令（1.6） 支持非堆内存(Direct Memory)聚合计算（1.6） 支持PostgreSQL的native协议（1.6） 支持mysql和oracle存储过程，out参数、多结果集返回（1.6） 支持zookeeper协调主从切换、zk序列、配置zk化（1.6） 支持库内分表（1.6） 集群基于ZooKeeper管理，在线升级，扩容，智能优化，大数据处理（2.0开发版） MyCat的目标低成本的将现有的单机数据库和应用平滑迁移到“云”端，解决数据存储和业务规模迅速增长情况下的数据瓶颈问题。 MyCat的优势基于阿里开源的Cobar产品而研发，Cobar的稳定性、可靠性、优秀的架构和性能，以及众多成熟的使用案例使得MyCAT一开始就拥有一个很好的起点，站在巨人的肩膀上，能看到更远。 广泛吸取业界优秀的开源项目和创新思路，将其融入到MyCAT的基因中，使得MyCAT在很多方面都领先于目前其他一些同类的开源项目，甚至超越某些商业产品。 MyCAT背后有一只强大的技术团队，其参与者都是5年以上资深软件工程师、架构师、DBA等，优秀的技术团队保证了MyCAT的产品质量。 MyCAT并不依托于任何一个商业公司，因此不像某些开源项目，将一些重要的特性封闭在其商业产品中，使得开源项目成了一个摆设。 MyCat的架构 MyCAT使用MySQL的通讯协议模拟成一个MySQL服务器，并建立了完整的Schema（数据库）、Table （数据表）、User（用户）的逻辑模型，并将这套逻辑模型映射到后端的存储节点DataNode（MySQL Instance）上的真实物理库中，这样一来，所有能使用MySQL的客户端以及编程语言都能将MyCAT当成是MySQLServer来使用，不必开发新的客户端协议。 当MyCAT收到一个客户端发送的SQL请求时，会先对SQL进行语法分析和检查，分析的结果用于SQL路由，SQL路由策略支持传统的基于表格的分片字段方式进行分片，也支持独有的基于数据库E-R关系的分片策略，对于路由到多个数据节点（DataNode）的SQL，则会对收到的数据集进行“归并”然后输出到客户端。SQL执行的过程，简单的说，就是把SQL通过网络协议发送给后端的真正的数据库上进行执行，对于MySQL Server来说，是通过MySQL网络协议发送报文，并解析返回的结果，若SQL不涉及到多个分片节点，则直接返回结果，写入客户端的SOCKET流中，这个过程是非阻塞模式（NIO）。 DataNode是MyCAT的逻辑数据节点，映射到后端的某一个物理数据库的一个Database，为了做到系统高可用，每个DataNode可以配置多个引用地址（DataSource），当主DataSource被检测为不可用时，系统会自动切换到下一个可用的DataSource上，这里的DataSource即可认为是Mysql的主从服务器的地址。 MyCat的初始化 MyCat的逻辑库与任何一个传统的关系型数据库一样，MyCAT也提供了“数据库”的定义，并有用户授权的功能，下面是MyCAT逻辑库相关的一些概念： schema:逻辑库，与MySQL中的Database（数据库）对应，一个逻辑库中定义了所包括的Table。 table：表，即物理数据库中存储的某一张表，与传统数据库不同，这里的表格需要声明其所存储的逻辑数据节点DataNode，这是通过表格的分片规则定义来实现的，table可以定义其所属的“子表(childTable)”，子表的分片依赖于与“父表”的具体分片地址，简单的说，就是属于父表里某一条记录A的子表的所有记录都与A存储在同一个分片上。 分片规则：是一个字段与函数的捆绑定义，根据这个字段的取值来返回所在存储的分片（DataNode）的序号，每个表格可以定义一个分片规则，分片规则可以灵活扩展，默认提供了基于数字的分片规则，字符串的分片规则等。 dataNode: MyCAT的逻辑数据节点，是存放table的具体物理节点，也称之为分片节点，通过DataSource来关联到后端某个具体数据库上，一般来说，为了高可用性，每个DataNode都设置两个DataSource，一主一从，当主节点宕机，系统自动切换到从节点。 dataHost：定义某个物理库的访问地址，用于捆绑到dataNode上。 MyCAT目前通过配置文件的方式来定义逻辑库和相关配置： MYCAT_HOME/conf/schema.xml中定义逻辑库，表、分片节点等内容； MYCAT_HOME/conf/rule.xml中定义分片规则； MYCAT_HOME/conf/server.xml中定义用户以及系统相关变量，如端口等。 MyCat的核心配置解析 schema.xml相关参数说明： &lt;?xml version="1.0"?&gt; &lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt; &lt;mycat:schema xmlns:mycat="http://io.mycat/"&gt; &lt;!-- 定义一个MyCat的模式，逻辑数据库名称TestDB --&gt; &lt;!-- “checkSQLschema”：描述的是当前的连接是否需要检测数据库的模式 --&gt; &lt;!-- “sqlMaxLimit”：表示返回的最大的数据量的行数 --&gt; &lt;!-- “dataNode="dn1"”：该操作使用的数据节点是dn1的逻辑名称 --&gt; &lt;schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1"/&gt; &lt;!-- 定义数据的操作节点 --&gt; &lt;!-- “dataHost="localhost1"”：定义数据节点的逻辑名称 --&gt; &lt;!-- “database="mldn"”：定义数据节点要使用的数据库名称 --&gt; &lt;dataNode name="dn1" dataHost="localhost1" database="mldn" /&gt; &lt;!-- 定义数据节点，包括了各种逻辑项的配置 --&gt; &lt;dataHost name="localhost1" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100"&gt; &lt;!-- 配置真实MySQL与MyCat的心跳 --&gt; &lt;heartbeat&gt;select user()&lt;/heartbeat&gt; &lt;!-- 配置真实的MySQL的连接路径 --&gt; &lt;writeHost host="hostM1" url="192.168.1.128:3306" user="root" password="123456"&gt;&lt;/writeHost&gt; &lt;/dataHost&gt; &lt;/mycat:schema&gt; dataHost标签属性说明 balance:负载均衡类型0：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上 1：全部的readHost与stand by writeHost参与select语句的负载均衡， 2：所有读操作都随机在writeHost、readHost上分发 3：所有读请求随机分发到writeHost对应的readHost执行，writeHost不负担读压力 writeType:负载均衡类型 0：所有写操作发送到配置的第一个writeHost，当第一个writeHost宕机时，切换到第二个writeHost，重新启动后以切换后的为准，切换记录在配置文件：dnindex.properties中 1：所有写操作都随发送到配置的writeHost 2：尚未实现 switchType:切换方式 -1：不自动切换1：自动切换（默认） 2：基于MySql主从同步的状态来决定是否切换 server.xml相关参数说明： &lt;!DOCTYPE mycat:server SYSTEM &quot;server.dtd&quot;&gt;&lt;mycat:server xmlns:mycat=&quot;http://io.mycat/&quot;&gt; &lt;system&gt; &lt;!-- 1为开启实时统计、0为关闭 如果使用Mycat-eye监控SQL则需要开启此项--&gt; &lt;code&gt;&lt;property name=&quot;useSqlStat&quot;&gt;0&lt;/property&gt;&lt;/code&gt; &lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt; &lt;property name=&quot;useGlobleTableCheck&quot;&gt;0&lt;/property&gt; &lt;property name=&quot;sequnceHandlerType&quot;&gt;2&lt;/property&gt; &lt;!--分布式事务开关，0为不过滤分布式事务，1为过滤分布式事务（如果分布式事务内只涉及全局表，则不过滤），2为不过滤分布式事务,但是记录分布式事务日志--&gt; &lt;property name=&quot;handleDistributedTransactions&quot;&gt;0&lt;/property&gt; &lt;!--off heap for merge/order/group/limit 1开启 0关闭 --&gt; &lt;property name=&quot;useOffHeapForMerge&quot;&gt;1&lt;/property&gt; &lt;!--单位为m--&gt; &lt;property name=&quot;memoryPageSize&quot;&gt;1m&lt;/property&gt; &lt;!--溢出文件缓冲区大小 单位为k--&gt; &lt;property name=&quot;spillsFileBufferSize&quot;&gt;1k&lt;/property&gt; &lt;property name=&quot;useStreamOutput&quot;&gt;0&lt;/property&gt; &lt;!--系统预留内存大小 单位为m--&gt; &lt;property name=&quot;systemReserveMemorySize&quot;&gt;384m&lt;/property&gt; &lt;!--是否采用zookeeper协调切换 --&gt; &lt;property name=&quot;useZKSwitch&quot;&gt;true&lt;/property&gt; &lt;!-- root 登录设置 --&gt; &lt;user name=&quot;root&quot;&gt; &lt;property name=&quot;password&quot;&gt;Hsg@123456&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;hsg_wx&lt;/property&gt; &lt;!-- 表级 DML 权限设置 --&gt; &lt;!-- &lt;privileges check=&quot;false&quot;&gt; &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt; &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt; &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt; &lt;/schema&gt; &lt;/privileges&gt; --&gt; &lt;/user&gt; &lt;user name=&quot;user&quot;&gt; &lt;property name=&quot;password&quot;&gt;user&lt;/property&gt; &lt;property name=&quot;schemas&quot;&gt;hsg_wx&lt;/property&gt; &lt;property name=&quot;readOnly&quot;&gt;true&lt;/property&gt; &lt;/user&gt; MyCat常用命令 ./mycat restart 重启服务 ./mycat pause 暂停 ./mycat status 查看启动状态 ./mycat start 启动 ./mycat stop 停止 mysql -uroot -p（账号密码） -h（所在机器IP） -P8066 -D（逻辑库名） 终端登录]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何更高效的管理原生微服务应用]]></title>
    <url>%2F2018%2F12%2F24%2F%E5%A6%82%E4%BD%95%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E5%8E%9F%E7%94%9F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[自从阿里重启Dubbo维护以来，其热度迅速蹿升，Github上的星标数已经达到了2.2万个之多，可谓中国开源软件界的明星产品。但是作为自家商业化输出的EDAS产品，却一直以来只能支持闭源的HSF微服务框架，对用户而言不能不说是一种遗憾。虽然以前也是可以支持Dubbo应用的，但却是以一种所谓的Dubbo over HSF来变相实现的，并不是真正无侵入的原生应用。现在这个担忧终于没有了，EDAS官方正式开始了商业化支持Dubbo的进程闲话少絮，我们先来构建一个简单的Dubbo应用，并将其部署到EDAS上面。根据这篇文档介绍的方法，我们来实现一个简单的Echo应用。此应用的能力是客户端通过HTTP接口获得一个字符串消息，然后将此消息发送给服务端，服务端接收到这个消息之后，再原封不动的回传给客户端，最终客户端将此回声信息打印出来，程序结束。 标 题标 题本文并不是一篇教程类文章，因此不会详细介绍该如何编写这样一个应用，只来关注一些重点内容。首先，除了依赖Dubbo库之外，还需要依赖一个EDAS提供的扩展库edas-dubbo-extension。该扩展库就是EDAS支持原生Dubbo应用的关键所在。 图1.edas-dubbo-extension依赖图1.edas-dubbo-extension依赖 除此之外，我们还需要将Dubbo配置文件中的registry参数设置为轻量级配置中心的地址。 标 注 按图 2.registry地址图2.registry地址 经过了这样的修改之后，我们的应用就可以原封不动的部署到EDAS上面了。 实际的部署过程与普通应用无异，应该是EDAS会自动判断该应用是否为原生Dubbo进而区分对待，因此熟悉EDAS的用户在这一点上不会碰到任何问题。部署完成以后在Provider和Consumer应用的服务列表里面，分别可以看到如下内容，说明服务启动正常。]]></content>
      <categories>
        <category>互联网</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[new Day]]></title>
    <url>%2F2018%2F12%2F24%2Fnew-Day%2F</url>
    <content type="text"><![CDATA[适当放松的方式]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Jackie.Yang]]></title>
    <url>%2F2018%2F12%2F24%2FJackie-Yang%2F</url>
    <content type="text"><![CDATA[这是第一篇文章，来测试一下Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake]]></content>
  </entry>
</search>
